#include "main.h"
#include <iostream>

/**
 * Runs the operator control code. This function will be started in its own task
 * with the default priority and stack size whenever the robot is enabled via
 * the Field Management System or the VEX Competition Switch in the operator
 * control mode.
 *
 * If no competition control is connected, this function will run immediately
 * following initialize().
 *
 * If the robot is disabled or communications is lost, the
 * operator control task will be stopped. Re-enabling the robot will restart the
 * task, not resume it from where it left off.
 */

 using namespace pros;


void opcontrol() {
	Controller master(E_CONTROLLER_MASTER);
  Motor Fleft(1), Fright(10), Bleft(11), Bright(20);
  lcd::initialize();

  while (true) {
    int x = master.get_analog(E_CONTROLLER_ANALOG_LEFT_X);
    int y = master.get_analog(E_CONTROLLER_ANALOG_LEFT_Y);
    int a = master.get_analog(E_CONTROLLER_ANALOG_RIGHT_X);

    if(abs(x) <= 5)
    x = 0;

    if(abs(y) <= 5)
    y = 0;

    if(abs(a) <= 5)
    a = 0;

    Fleft.move(x + y + a);
    Fright.move(x - y + a);
    Bleft.move(-x + y + a);
    Bright.move(-x - y + a);

    if(Expand_button && Intake_button && !buttonLst && !buttonLst2){
      lcd::print(0, "hit");
      Fleft.move_relative(100, 127);
      Fright.move_relative(100, 127);
      Bleft.move_relative(100, 127);
      Bright.move_relative(100, 127);
      delay(1000);
    }
    delay(10);
    buttonLst2 = Expand_button;
    buttonLst = Intake_button;
  }
}
