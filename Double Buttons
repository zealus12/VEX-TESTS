#include "main.h"
#include <iostream>
/**
 * Runs the operator control code. This function will be started in its own task
 * with the default priority and stack size whenever the robot is enabled via
 * the Field Management System or the VEX Competition Switch in the operator
 * control mode.
 *
 * If no competition control is connected, this function will run immediately
 * following initialize().
 *
 * If the robot is disabled or communications is lost, the
 * operator control task will be stopped. Re-enabling the robot will restart the
 * task, not resume it from where it left off.
 */

 using namespace pros;


void opcontrol() {
	Controller master(E_CONTROLLER_MASTER);
  int i = 0;

  Motor motor1(2), Fleft(1), Fright(10), Bleft(11), Bright(20) ;
  lcd::initialize();
  bool Open_button = false, buttonLstO, Test_button = false, buttonLstT = false;

  while (true) {
    Test_button = master.get_digital(E_CONTROLLER_DIGITAL_L2);
    Open_button = master.get_digital(E_CONTROLLER_DIGITAL_L1);
    int x = master.get_analog(E_CONTROLLER_ANALOG_LEFT_X);
    int y = master.get_analog(E_CONTROLLER_ANALOG_LEFT_Y);
    int a = master.get_analog(E_CONTROLLER_ANALOG_RIGHT_X);

    if(abs(x) <= 5)
    x = 0;

    if(abs(y) <= 5)
    y = 0;

    if(abs(a) <= 5)
    a = 0;


      Fleft.move(x + y + a);
      Fright.move(x - y + a);
      Bleft.move(-x + y + a);
      Bright.move(-x - y + a);

    if(Open_button && !buttonLstO && !Test_button){
      motor1.move_relative(-100, 127);
    }

    if(Open_button && Test_button && !buttonLstO && !buttonLstT){
      Fleft.move(127);
      Fright.move(127);
      Bright.move(127);
      Bleft.move(127);
    }

    buttonLstT = Test_button;
    buttonLstO = Open_button;

  }
}
